/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/TOVqRojGYoy
 */
import { useEffect, useState } from "react";
import { CardTitle, CardDescription, CardHeader, CardContent, CardFooter, Card } from "../card"
import { Calendar } from "../calendar"
import { useSetAtom } from "jotai";
import { sessionAtom } from "@/app/states/common";
import { formatDate } from "@/app/lib/formattedDate";

export function EncCalendar({ calendar }: { calendar: any }) {
  const [dates, setDates] = useState<Array<any>>([]);
  const soldOutDates: string[] = ["2024-02-14", "2024-02-15", "2024-02-16"];
  const soldOutDatesAsDate: Date[] = soldOutDates.map(dateString => new Date(dateString));

  useEffect(() => {
    if (calendar?.calendar) {
      const calendarData = calendar?.calendar;
      const availability = Object.entries(calendarData).filter(([date, status]) => status === 'available').map(([date]) => date);
      setDates(availability);
    }
  }, [calendar]);

  return (
    // <div className="min-h-screen bg-gray-100 dark:bg-gray-900 flex items-center justify-center">
    <div className="w-full bg-gray-100 dark:bg-gray-900 flex items-center justify-center">
      <div className="w-full">
        <Card>
          {/* <CardHeader>
            <CardTitle>Select a Date</CardTitle>
            <CardDescription>
              Please select a date to proceed with ticket selection. Dates marked as "Sold Out" are not available.
            </CardDescription>
          </CardHeader> */}
          {/* <CardContent> */}
          <Calendar
            className="w-full"
            initialFocus
            mode="single"
            // disabled={ dates.map(dateString => dates !== new Date(dateString))}
            modifiers={{
              // soldOut: soldOutDatesAsDate,
              available: dates,
              soldOut: soldOutDatesAsDate,
            }}
            modifiersClassNames={{
              soldOut: "bg-red-500 text-white",
            }}
          />
          {/* </CardContent> */}
          {/* <CardFooter>
            <Button className="w-full">Proceed to Ticket Selection</Button>
          </CardFooter> */}
        </Card>
      </div>
    </div>
  )
}

export const EncTime = ({ sessions, timezone }: { sessions: any[], timezone: string }) => {
  const [times, setTimes] = useState<any[]>([]);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const setSelectedSession = useSetAtom(sessionAtom);
  const cellsPerRow = 4;

  useEffect(() => {
    const formattedTimes = sessions.map((time: any) => ({
      id: time.id,
      formattedTimeStart: formatDate(time.start_datetime, timezone, "h:mm"),
      formattedTimeEnd: formatDate(time.end_datetime, timezone, "h:mm a"),
    }));
    setTimes(formattedTimes);
  }, [sessions, timezone]);

  const handleTimeClick = (timeId: string, start: string, end: string) => {
    setSelectedTime(timeId);
    setSelectedSession((props: any) => ({
      ...props,
      selectedSessionId: timeId,
      sessionStart: start,
      sessionEnd: end,
    }));
  };

  return (
    <div className="w-full">
      <h1 className="text-1xl font-semibold mb-2">Select arrival time</h1>
      <table className="w-full border-collapse">
        <tbody className="w-full">
          {Array.from({ length: Math.ceil(times.length / cellsPerRow) }, (_, rowIndex) => (
            <tr key={rowIndex}>
              {times.slice(rowIndex * cellsPerRow, (rowIndex + 1) * cellsPerRow).map((time: any) => (
                <td
                  key={time.id}
                  className={`h-[46px] p-4 text-center border border-solid border-gray-300 font-inter text-base font-bold cursor-pointer transition duration-300 ease-in-out ${selectedTime === time.id ? 'bg-gray-800 text-white' : 'hover:bg-gray-800 hover:text-white'
                    }`}
                  onClick={() => handleTimeClick(time.id, time.formattedTimeStart, time.formattedTimeEnd)}
                >
                  {time.formattedTimeStart}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
